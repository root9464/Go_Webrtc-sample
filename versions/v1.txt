// package main

// import (
// 	"encoding/json"
// 	"flag"
// 	"fmt"
// 	"sync"
// 	"time"

// 	"github.com/gofiber/contrib/socketio"
// 	"github.com/gofiber/contrib/websocket"
// 	"github.com/gofiber/fiber/v2"
// 	"github.com/pion/logging"
// 	"github.com/pion/rtcp"
// 	"github.com/pion/webrtc/v4"
// )

// var (
// 	addr   = flag.String("addr", ":8080", "http service address")
// 	cert   = flag.String("cert", "./cert.pem", "TLS certificate file")
// 	key    = flag.String("key", "./key.pem", "TLS private key file")
// 	logger = logging.NewDefaultLoggerFactory().NewLogger("sfu-ws")
// )

// type TrackInfo struct {
// 	Track *webrtc.TrackLocalStaticRTP
// 	Owner *webrtc.PeerConnection
// }

// type SFU struct {
// 	peers       map[*webrtc.PeerConnection]*websocket.Conn
// 	trackLocals map[string]TrackInfo
// 	mu          sync.RWMutex
// }

// type websocketMessage struct {
// 	Event string `json:"event"`
// 	Data  string `json:"data"`
// }

// func NewSFU() *SFU {
// 	return &SFU{
// 		peers:       make(map[*webrtc.PeerConnection]*websocket.Conn),
// 		trackLocals: make(map[string]TrackInfo),
// 	}
// }

// func (s *SFU) addPeer(pc *webrtc.PeerConnection, conn *websocket.Conn) {
// 	s.mu.Lock()
// 	defer s.mu.Unlock()
// 	s.peers[pc] = conn

// 	pc.OnConnectionStateChange(func(state webrtc.PeerConnectionState) {
// 		if state == webrtc.PeerConnectionStateClosed || state == webrtc.PeerConnectionStateFailed {
// 			s.removePeer(pc)
// 		}
// 	})
// }

// func (s *SFU) removePeer(pc *webrtc.PeerConnection) {
// 	s.mu.Lock()
// 	defer s.mu.Unlock()

// 	for trackID, trackInfo := range s.trackLocals {
// 		if trackInfo.Owner == pc {
// 			delete(s.trackLocals, trackID)
// 		}
// 	}

// 	delete(s.peers, pc)
// 	if err := pc.Close(); err != nil {
// 		logger.Errorf("закрытие соединения: %v", err)
// 	}
// }

// func (s *SFU) addTrack(pc *webrtc.PeerConnection, t *webrtc.TrackRemote) (*webrtc.TrackLocalStaticRTP, error) {
// 	trackLocal, err := webrtc.NewTrackLocalStaticRTP(t.Codec().RTPCodecCapability, t.ID(), t.StreamID())
// 	if err != nil {
// 		return nil, fmt.Errorf("создание трека: %w", err)
// 	}

// 	s.mu.Lock()
// 	s.trackLocals[t.ID()] = TrackInfo{
// 		Track: trackLocal,
// 		Owner: pc,
// 	}
// 	s.mu.Unlock()

// 	return trackLocal, nil
// }

// func (s *SFU) removeTrack(track *webrtc.TrackLocalStaticRTP) {
// 	s.mu.Lock()
// 	delete(s.trackLocals, track.ID())
// 	s.mu.Unlock()
// }

// func (s *SFU) activePeers() map[*webrtc.PeerConnection]*websocket.Conn {
// 	s.mu.Lock()
// 	defer s.mu.Unlock()
// 	active := make(map[*webrtc.PeerConnection]*websocket.Conn)
// 	for pc, conn := range s.peers {
// 		if pc.ConnectionState() != webrtc.PeerConnectionStateClosed {
// 			active[pc] = conn
// 		}
// 	}
// 	s.peers = active
// 	return active
// }

// func (s *SFU) updatePeerTracks(pc *webrtc.PeerConnection) error {
// 	senders := pc.GetSenders()
// 	for _, sender := range senders {
// 		if sender.Track() == nil {
// 			continue
// 		}
// 		trackID := sender.Track().ID()
// 		s.mu.RLock()
// 		trackInfo, ok := s.trackLocals[trackID]
// 		s.mu.RUnlock()
// 		if !ok || trackInfo.Owner == pc {
// 			if err := pc.RemoveTrack(sender); err != nil {
// 				return fmt.Errorf("удаление трека: %w", err)
// 			}
// 		}
// 	}

// 	sendingTracks := make(map[string]bool)
// 	for _, sender := range pc.GetSenders() {
// 		if track := sender.Track(); track != nil {
// 			sendingTracks[track.ID()] = true
// 		}
// 	}

// 	s.mu.RLock()
// 	defer s.mu.RUnlock()
// 	for trackID, trackInfo := range s.trackLocals {
// 		if trackInfo.Owner == pc {
// 			continue
// 		}
// 		if !sendingTracks[trackID] {
// 			if _, err := pc.AddTrack(trackInfo.Track); err != nil {
// 				return fmt.Errorf("добавление трека: %w", err)
// 			}
// 		}
// 	}
// 	return nil
// }

// func (s *SFU) dispatchKeyFrames() {
// 	s.mu.RLock()
// 	defer s.mu.RUnlock()
// 	for pc := range s.peers {
// 		for _, receiver := range pc.GetReceivers() {
// 			if track := receiver.Track(); track != nil && track.Kind() == webrtc.RTPCodecTypeVideo {
// 				_ = pc.WriteRTCP([]rtcp.Packet{
// 					&rtcp.PictureLossIndication{MediaSSRC: uint32(track.SSRC())},
// 				})
// 			}
// 		}
// 	}
// }

// func (s *SFU) signalPeers() error {
// 	peers := s.activePeers()
// 	for pc, conn := range peers {
// 		if pc.SignalingState() != webrtc.SignalingStateStable {
// 			continue
// 		}

// 		if err := s.updatePeerTracks(pc); err != nil {
// 			return err
// 		}

// 		offer, err := pc.CreateOffer(nil)
// 		if err != nil {
// 			return fmt.Errorf("создание оффера: %w", err)
// 		}

// 		if err = pc.SetLocalDescription(offer); err != nil {
// 			return fmt.Errorf("установка локального описания: %w", err)
// 		}

// 		offerData, err := json.Marshal(offer)
// 		if err != nil {
// 			return fmt.Errorf("сериализация оффера: %w", err)
// 		}

// 		if err = conn.WriteJSON(websocketMessage{
// 			Event: "offer",
// 			Data:  string(offerData),
// 		}); err != nil {
// 			return fmt.Errorf("отправка оффера: %w", err)
// 		}
// 	}
// 	s.dispatchKeyFrames()
// 	return nil
// }

// func (s *SFU) sendOffer(pc *webrtc.PeerConnection, conn *websocket.Conn, iceRestart bool) error {
// 	if pc.SignalingState() != webrtc.SignalingStateStable {
// 		return nil
// 	}

// 	offerOptions := &webrtc.OfferOptions{
// 		ICERestart: iceRestart,
// 	}
// 	offer, err := pc.CreateOffer(offerOptions)
// 	if err != nil {
// 		return fmt.Errorf("создание оффера: %w", err)
// 	}

// 	if err = pc.SetLocalDescription(offer); err != nil {
// 		return fmt.Errorf("установка локального описания: %w", err)
// 	}

// 	offerData, err := json.Marshal(offer)
// 	if err != nil {
// 		return fmt.Errorf("сериализация оффера: %w", err)
// 	}

// 	return conn.WriteJSON(websocketMessage{
// 		Event: "offer",
// 		Data:  string(offerData),
// 	})
// }

// func (s *SFU) handleWebSocket(c *fiber.Ctx) error {
// 	socketio.On(socketio.EventMessage, func(ep *socketio.EventPayload) {
// 		var msg websocketMessage
// 		if err := json.Unmarshal(ep.Data, &msg); err != nil {
// 			logger.Errorf("десериализация сообщения: %v", err)
// 			return
// 		}

// 		pc, ok := ep.Kws.GetAttribute("pc").(*webrtc.PeerConnection)
// 		if !ok {
// 			logger.Errorf("соединение не найдено")
// 			return
// 		}

// 		switch msg.Event {
// 		case "candidate":
// 			var candidate webrtc.ICECandidateInit
// 			if err := json.Unmarshal([]byte(msg.Data), &candidate); err != nil {
// 				logger.Errorf("десериализация кандидата: %v", err)
// 				return
// 			}
// 			if err := pc.AddICECandidate(candidate); err != nil {
// 				logger.Errorf("добавление ICE-кандидата: %v", err)
// 			}
// 		case "answer":
// 			if pc.SignalingState() != webrtc.SignalingStateHaveLocalOffer {
// 				logger.Errorf("некорректное сигнальное состояние для ответа: %s", pc.SignalingState().String())
// 				return
// 			}
// 			var answer webrtc.SessionDescription
// 			if err := json.Unmarshal([]byte(msg.Data), &answer); err != nil {
// 				logger.Errorf("десериализация ответа: %v", err)
// 				return
// 			}
// 			if err := pc.SetRemoteDescription(answer); err != nil {
// 				logger.Errorf("установка удаленного описания: %v", err)
// 				return
// 			}
// 			if err := s.signalPeers(); err != nil {
// 				logger.Errorf("сигнализация пиров после ответа: %v", err)
// 			}
// 		default:
// 			logger.Warnf("неизвестное событие: %s", msg.Event)
// 		}
// 	})

// 	return socketio.New(func(kws *socketio.Websocket) {
// 		config := webrtc.Configuration{
// 			ICEServers: []webrtc.ICEServer{{URLs: []string{"stun:stun.l.google.com:19302"}}},
// 		}

// 		mediaEngine := webrtc.MediaEngine{}
// 		if err := mediaEngine.RegisterCodec(webrtc.RTPCodecParameters{
// 			RTPCodecCapability: webrtc.RTPCodecCapability{
// 				MimeType:    webrtc.MimeTypeOpus,
// 				ClockRate:   48000,
// 				Channels:    2,
// 				SDPFmtpLine: "minptime=10;useinbandfec=1",
// 			},
// 			PayloadType: 111,
// 		}, webrtc.RTPCodecTypeAudio); err != nil {
// 			logger.Errorf("регистрация аудиокодека: %v", err)
// 			return
// 		}

// 		if err := mediaEngine.RegisterCodec(webrtc.RTPCodecParameters{
// 			RTPCodecCapability: webrtc.RTPCodecCapability{
// 				MimeType:  webrtc.MimeTypeVP8,
// 				ClockRate: 90000,
// 			},
// 			PayloadType: 96,
// 		}, webrtc.RTPCodecTypeVideo); err != nil {
// 			logger.Errorf("регистрация видеокодека: %v", err)
// 			return
// 		}

// 		api := webrtc.NewAPI(webrtc.WithMediaEngine(&mediaEngine))
// 		pc, err := api.NewPeerConnection(config)
// 		if err != nil {
// 			logger.Errorf("создание соединения: %v", err)
// 			return
// 		}

// 		kws.SetAttribute("pc", pc)
// 		s.addPeer(pc, kws.Conn)

// 		pc.OnICECandidate(func(i *webrtc.ICECandidate) {
// 			if i == nil {
// 				return
// 			}
// 			candidateData, err := json.Marshal(i.ToJSON())
// 			if err != nil {
// 				logger.Errorf("сериализация кандидата: %v", err)
// 				return
// 			}

// 			kws.Emit(candidateData, socketio.TextMessage)
// 		})

// 		pc.OnConnectionStateChange(func(state webrtc.PeerConnectionState) {
// 			if state == webrtc.PeerConnectionStateFailed {
// 				s.mu.RLock()
// 				conn, ok := s.peers[pc]
// 				s.mu.RUnlock()
// 				if ok {
// 					if err := s.sendOffer(pc, conn, true); err != nil {
// 						logger.Errorf("перезапуск ICE: %v", err)
// 					}
// 				}
// 			}
// 		})

// 		pc.OnTrack(func(t *webrtc.TrackRemote, _ *webrtc.RTPReceiver) {
// 			trackLocal, err := s.addTrack(pc, t)
// 			if err != nil {
// 				logger.Errorf("добавление трека: %v", err)
// 				return
// 			}
// 			defer s.removeTrack(trackLocal)

// 			if err := s.signalPeers(); err != nil {
// 				logger.Errorf("сигнализация пиров: %v", err)
// 			}

// 			buf := make([]byte, 1500)
// 			for {
// 				if pc.ConnectionState() != webrtc.PeerConnectionStateConnected || t == nil {
// 					return
// 				}
// 				n, _, err := t.Read(buf)
// 				if err != nil {
// 					logger.Errorf("чтение трека: %v", err)
// 					return
// 				}
// 				if _, err := trackLocal.Write(buf[:n]); err != nil {
// 					logger.Errorf("запись трека: %v", err)
// 					return
// 				}
// 			}
// 		})

// 		for _, typ := range []webrtc.RTPCodecType{webrtc.RTPCodecTypeVideo, webrtc.RTPCodecTypeAudio} {
// 			if _, err := pc.AddTransceiverFromKind(typ, webrtc.RTPTransceiverInit{
// 				Direction: webrtc.RTPTransceiverDirectionSendrecv,
// 			}); err != nil {
// 				logger.Errorf("добавление трансивера: %v", err)
// 				return
// 			}
// 		}

// 		if err := s.signalPeers(); err != nil {
// 			logger.Errorf("начальная сигнализация пиров: %v", err)
// 		}
// 	})(c)
// }

// func main() {
// 	flag.Parse()
// 	sfu := NewSFU()
// 	app := fiber.New()

// 	app.Get("/websocket", sfu.handleWebSocket)

// 	go func() {
// 		for range time.Tick(3 * time.Second) {
// 			sfu.dispatchKeyFrames()
// 		}
// 	}()

// 	if err := app.ListenTLS(*addr, *cert, *key); err != nil {
// 		logger.Errorf("запуск сервера: %v", err)
// 	}
// }
