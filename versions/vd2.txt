package main

import (
	"encoding/json"
	"flag"
	"sync"
	"text/template"
	"time"

	"github.com/gofiber/contrib/socketio"
	"github.com/gofiber/contrib/websocket"
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/log"
	"github.com/pion/rtcp"
	"github.com/pion/webrtc/v4"
)

var (
	addr          = flag.String("addr", ":8080", "http service address")
	indexTemplate = &template.Template{}
	listLock      sync.RWMutex
	connections   []connection
	trackLocals   map[string]*webrtc.TrackLocalStaticRTP
)

type websocketMessage struct {
	Event string `json:"event"`
	Data  string `json:"data"`
}

type connection struct {
	pc   *webrtc.PeerConnection
	kws  *socketio.Websocket
	lock sync.Mutex
}

func writeJSON(kws *socketio.Websocket, lock *sync.Mutex, v interface{}) error {
	lock.Lock()
	defer lock.Unlock()
	data, err := json.Marshal(v)
	if err != nil {
		return err
	}
	kws.Emit(data, socketio.TextMessage)
	return nil
}

func main() {
	flag.Parse()
	trackLocals = make(map[string]*webrtc.TrackLocalStaticRTP)
	app := fiber.New()

	app.Use(func(c *fiber.Ctx) error {
		if websocket.IsWebSocketUpgrade(c) {
			c.Locals("allowed", true)
			return c.Next()
		}
		return fiber.ErrUpgradeRequired
	})

	app.Get("/", func(c *fiber.Ctx) error {
		return indexTemplate.Execute(c.Response().BodyWriter(), "ws://"+c.Hostname()+"/websocket")
	})

	socketio.On(socketio.EventConnect, func(ep *socketio.EventPayload) {
		log.Infof("New connection: %s", ep.Kws.GetUUID())
	})

	socketio.On(socketio.EventMessage, websocketHandler)

	socketio.On(socketio.EventDisconnect, func(ep *socketio.EventPayload) {
		listLock.Lock()
		defer listLock.Unlock()
		for i, conn := range connections {
			if conn.kws.GetUUID() == ep.Kws.GetUUID() {
				connections = append(connections[:i], connections[i+1:]...)
				if err := conn.pc.Close(); err != nil {
					log.Errorf("Failed to close PeerConnection: %v", err)
				}
				signalPeerConnections()
				break
			}
		}
		log.Infof("Disconnected: %s", ep.Kws.GetUUID())
	})

	app.Get("/websocket", socketio.New(func(kws *socketio.Websocket) {
		pc, err := webrtc.NewPeerConnection(webrtc.Configuration{
			ICEServers: []webrtc.ICEServer{
				{
					URLs: []string{"stun:stun.l.google.com:19302"},
				},
			},
		})
		if err != nil {
			log.Errorf("Failed to create PeerConnection: %v", err)
			return
		}

		// Добавляем аудио и видео транспондеры
		if _, err := pc.AddTransceiverFromKind(webrtc.RTPCodecTypeAudio); err != nil {
			log.Errorf("Failed to add audio transceiver: %v", err)
			return
		}
		if _, err := pc.AddTransceiverFromKind(webrtc.RTPCodecTypeVideo); err != nil {
			log.Errorf("Failed to add video transceiver: %v", err)
			return
		}

		listLock.Lock()
		connections = append(connections, connection{pc: pc, kws: kws})
		listLock.Unlock()

		pc.OnTrack(func(track *webrtc.TrackRemote, receiver *webrtc.RTPReceiver) {
			log.Infof("Track received: %s, kind: %s", track.ID(), track.Kind())
			trackLocal := addTrack(track)
			if trackLocal == nil {
				return
			}

			go func() {
				defer removeTrack(trackLocal)
				buf := make([]byte, 1500)
				for {
					n, _, err := track.Read(buf)
					if err != nil {
						log.Infof("Track read error: %v", err)
						return
					}

					if _, err = trackLocal.Write(buf[:n]); err != nil {
						log.Infof("Track write error: %v", err)
						return
					}
				}
			}()
		})

		pc.OnICECandidate(func(candidate *webrtc.ICECandidate) {
			if candidate == nil {
				return
			}

			candidateJSON, err := json.Marshal(candidate.ToJSON())
			if err != nil {
				log.Errorf("Failed to marshal candidate: %v", err)
				return
			}

			if err := writeJSON(kws, &sync.Mutex{}, &websocketMessage{
				Event: "candidate",
				Data:  string(candidateJSON),
			}); err != nil {
				log.Errorf("Failed to send candidate: %v", err)
			}
		})

		pc.OnConnectionStateChange(func(state webrtc.PeerConnectionState) {
			log.Infof("Connection state changed: %s", state)
			if state == webrtc.PeerConnectionStateFailed || state == webrtc.PeerConnectionStateClosed {
				signalPeerConnections()
			}
		})

		signalPeerConnections()
	}))

	go func() {
		for range time.NewTicker(time.Second * 3).C {
			dispatchKeyFrame()
		}
	}()

	if err := app.Listen(*addr); err != nil {
		log.Errorf("Failed to start server: %v", err)
	}
}

func websocketHandler(ep *socketio.EventPayload) {
	message := &websocketMessage{}
	if err := json.Unmarshal(ep.Data, &message); err != nil {
		log.Errorf("Failed to unmarshal message: %v", err)
		return
	}

	listLock.RLock()
	defer listLock.RUnlock()

	var conn *connection
	for i := range connections {
		if connections[i].kws.GetUUID() == ep.Kws.GetUUID() {
			conn = &connections[i]
			break
		}
	}

	if conn == nil {
		log.Errorf("No PeerConnection found for UUID: %s", ep.Kws.GetUUID())
		return
	}

	switch message.Event {
	case "candidate":
		candidate := webrtc.ICECandidateInit{}
		if err := json.Unmarshal([]byte(message.Data), &candidate); err != nil {
			log.Errorf("Failed to unmarshal candidate: %v", err)
			return
		}
		if err := conn.pc.AddICECandidate(candidate); err != nil {
			log.Errorf("Failed to add ICE candidate: %v", err)
		}

	case "answer":
		answer := webrtc.SessionDescription{}
		if err := json.Unmarshal([]byte(message.Data), &answer); err != nil {
			log.Errorf("Failed to unmarshal answer: %v", err)
			return
		}
		if err := conn.pc.SetRemoteDescription(answer); err != nil {
			log.Errorf("Failed to set remote description: %v", err)
		}
	}
}

func addTrack(t *webrtc.TrackRemote) *webrtc.TrackLocalStaticRTP {
	listLock.Lock()
	defer listLock.Unlock()

	trackLocal, err := webrtc.NewTrackLocalStaticRTP(t.Codec().RTPCodecCapability, t.ID(), t.StreamID())
	if err != nil {
		log.Errorf("Failed to create track local: %v", err)
		return nil
	}

	trackLocals[t.ID()] = trackLocal
	signalPeerConnections()
	return trackLocal
}

func removeTrack(t *webrtc.TrackLocalStaticRTP) {
	listLock.Lock()
	defer listLock.Unlock()

	delete(trackLocals, t.ID())
	signalPeerConnections()
}

func signalPeerConnections() {
	listLock.Lock()
	defer listLock.Unlock()

	for i := 0; i < len(connections); {
		if connections[i].pc.ConnectionState() == webrtc.PeerConnectionStateClosed {
			connections = append(connections[:i], connections[i+1:]...)
			continue
		}

		// Удаляем все существующие треки
		for _, sender := range connections[i].pc.GetSenders() {
			if err := connections[i].pc.RemoveTrack(sender); err != nil {
				log.Errorf("Failed to remove track: %v", err)
			}
		}

		// Добавляем все актуальные треки
		for trackID := range trackLocals {
			if _, err := connections[i].pc.AddTrack(trackLocals[trackID]); err != nil {
				log.Errorf("Failed to add track: %v", err)
				continue
			}
		}

		// Создаем новый offer
		offer, err := connections[i].pc.CreateOffer(nil)
		if err != nil {
			log.Errorf("Failed to create offer: %v", err)
			i++
			continue
		}

		if err = connections[i].pc.SetLocalDescription(offer); err != nil {
			log.Errorf("Failed to set local description: %v", err)
			i++
			continue
		}

		offerString, err := json.Marshal(offer)
		if err != nil {
			log.Errorf("Failed to marshal offer: %v", err)
			i++
			continue
		}

		if err = writeJSON(connections[i].kws, &connections[i].lock, &websocketMessage{
			Event: "offer",
			Data:  string(offerString),
		}); err != nil {
			log.Errorf("Failed to send offer: %v", err)
		}

		i++
	}
}

func dispatchKeyFrame() {
	listLock.Lock()
	defer listLock.Unlock()

	for i := range connections {
		for _, receiver := range connections[i].pc.GetReceivers() {
			if receiver.Track() == nil {
				continue
			}

			_ = connections[i].pc.WriteRTCP([]rtcp.Packet{
				&rtcp.PictureLossIndication{
					MediaSSRC: uint32(receiver.Track().SSRC()),
				},
			})
		}
	}
}
